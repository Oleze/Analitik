▎1. Бизнес-процесс создания заказа

Для описания бизнес-процесса создания заказа в мобильном приложении "Частная пекарня" можно использовать нотацию BPMN (Business Process Model and Notation).

▎Диаграмма бизнес-процесса создания заказа

[Пользователь] --> [Выбор товара] --> [Добавление в корзину] --> [Просмотр корзины]
[Просмотр корзины] --> [Создание заказа] --> [Оплата заказа] --> [Подтверждение заказа]


▎2. Процесс синхронизации данных между клиентом и сервером

▎Описание процессов

• Создание заказа:

  • Клиент отправляет запрос на создание заказа с выбранными товарами.

  • Сервер обрабатывает запрос, создает заказ в базе данных и возвращает ID заказа.

• Редактирование заказа:

  • Клиент отправляет изменения (например, изменение количества товаров).

  • Сервер обновляет данные о заказе и возвращает статус обновления.

• Отмена заказа:

  • Клиент отправляет запрос на отмену заказа.

  • Сервер удаляет заказ из базы данных и возвращает статус.

• Изменение персональных данных:

  • Клиент отправляет обновленные данные пользователя.

  • Сервер обновляет информацию в базе данных.

• Оплата заказа:

  • Клиент отправляет данные для оплаты.

  • Сервер обрабатывает платеж и обновляет статус заказа.

▎API методы

POST /orders          // Создание нового заказа
PUT /orders/{id}     // Редактирование существующего заказа
DELETE /orders/{id}  // Отмена заказа
PUT /users/{id}      // Изменение персональных данных пользователя
POST /payment        // Оплата заказа


▎UML диаграмма взаимодействия

+------------------+          +---------------------+
|    Пользователь  |          |       Сервер        |
+------------------+          +---------------------+
|                  |          |                     |
| 1. Выбор товара  |--------->|                     |
|                  |          |                     |
| 2. Создание      |--------->|   Создать заказ     |
|    заказа        |          |                     |
|                  |<---------|   Возврат ID заказа |
|                  |          |                     |
| 3. Оплата        |--------->|   Обработать оплату |
|                  |<---------|   Подтверждение     |
+------------------+          +---------------------+


▎ER-диаграмма сущностей

[Покупатель]
- id (PK)
- имя
- фамилия
- дата_рождения

[Товар]
- id (PK)
- название
- стоимость

[Покупка]
- id (PK)
- покупатель_id (FK)
- товар_id (FK)
- дата_покупки


▎3. Прототип экрана создания заказа

▎Описание пользовательского интерфейса для экрана создания заказа:

• Заголовок: "Создание заказа"

• Список товаров: Отображение всех доступных товаров с кнопками "Добавить в корзину".

• Корзина: Список добавленных товаров с возможностью изменить количество или удалить товар.

• Итоговая стоимость: Отображение общей суммы заказанных товаров.

• Кнопка "Оформить заказ": Переход к форме оплаты.

▎4. Подробное описание функции редактирования заказа

▎Постановка задачи: Редактирование заказа

• Описание: Пользователь должен иметь возможность редактировать уже созданный заказ, изменяя количество товаров или удаляя их из заказа.

▎UML диаграмма

+---------------------+
|    Редактирование   |
|       Заказа        |
+---------------------+
| + редактировать()   |
| + удалить()         |
+---------------------+


▎Используемые API методы

• PUT /orders/{id} — для обновления информации о заказе.

▎Передаваемые параметры

{
  "order_id": "123",
  "products": [
    {
      "product_id": "456",
      "quantity": 2
    },
    {
      "product_id": "789",
      "quantity": 1
    }
  ]
}


▎Процесс хранения информации о покупках пользователя

Информация о покупках хранится в таблице Покупка, которая связывает Покупатель и Товар. Каждая запись содержит дату покупки и идентификаторы покупателя и товара.
5. SQL-запросы

1. Вывести покупателей с количеством осуществленных покупок
SELECT p.id, p.имя, p.фамилия, COUNT(b.id) AS количество_покупок
FROM Покупатель p
LEFT JOIN Покупка b ON p.id = b.покупатель_id
GROUP BY p.id, p.имя, p.фамилия;


2. Общую стоимость товаров для каждого покупателя и отсортировать результат в порядке убывания
SELECT p.id, p.имя, p.фамилия, SUM(t.стоимость) AS общая_стоимость
FROM Покупатель p
JOIN Покупка b ON p.id = b.покупатель_id
JOIN Товар t ON b.товар_id = t.id
GROUP BY p.id, p.имя, p.фамилия
ORDER BY общая_стоимость DESC;


3. Получить покупателей, купивших только один товар
SELECT p.id, p.имя, p.фамилия
FROM Покупатель p
JOIN Покупка b ON p.id = b.покупатель_id
GROUP BY p.id, p.имя, p.фамилия
HAVING COUNT(DISTINCT b.товар_id) = 1;
