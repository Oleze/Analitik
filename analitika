Для описания бизнес-процесса создания заказа в мобильном клиент-серверном приложении "Частная пекарня", а также других аспектов, давайте последовательно разберем каждую часть задания.

▎1. Бизнес-процесс создания заказа

Используем нотацию BPMN (Business Process Model and Notation) для описания процесса создания заказа.

▎Диаграмма бизнес-процесса создания заказа
[Пользователь] --> [Выбор товара] --> [Добавление в корзину] --> [Просмотр корзины]
[Просмотр корзины] --> [Создание заказа] --> [Оплата заказа] --> [Подтверждение заказа]
2. Синхронизация данных между клиентом и сервером

▎Процесс синхронизации данных

• Создание заказа:

  • Клиент отправляет POST-запрос на сервер с данными заказа.

  • Сервер создает заказ в базе данных и возвращает подтверждение с ID заказа.

  
• Редактирование заказа:

  • Клиент отправляет PUT-запрос на сервер с изменениями.

  • Сервер обновляет данные в базе и возвращает статус выполнения.

• Отмена заказа:

  • Клиент отправляет DELETE-запрос на сервер с ID заказа.

  • Сервер удаляет заказ из базы и возвращает статус.

• Изменение персональных данных:

  • Клиент отправляет PUT-запрос на сервер с новыми данными пользователя.

  • Сервер обновляет информацию и возвращает подтверждение.

• Оплата заказа:

  • Клиент отправляет POST-запрос на сервер с данными для оплаты.

  • Сервер обрабатывает платеж и обновляет статус заказа.

▎API методы
POST /orders          // Создание нового заказа
PUT /orders/{id}     // Редактирование существующего заказа
DELETE /orders/{id}  // Отмена заказа
PUT /users/{id}      // Изменение персональных данных пользователя
POST /payment        // Оплата заказа
3. ER-диаграмма сущностей
[Пользователь]
- user_id (PK)
- name
- email
- phone

[Заказ]
- order_id (PK)
- user_id (FK)
- order_date
- total_amount
- status

[Товар]
- product_id (PK)
- name
- price

[Заказ_Товар]
- order_product_id (PK)
- order_id (FK)
- product_id (FK)
- quantity
4. Прототип экрана создания заказа

▎Описание пользовательского интерфейса для экрана создания заказа:

• Заголовок: "Создание заказа"

• Список товаров: Список доступных товаров с кнопками "Добавить в корзину".

• Корзина: Отображение добавленных товаров с возможностью изменить количество или удалить товар.

• Итоговая стоимость: Общая сумма заказанных товаров.

• Кнопка "Оформить заказ": Переход к форме оплаты.

▎5. Подробное описание функции редактирования заказа

▎Постановка задачи: Редактирование заказа

• Описание: Пользователь должен иметь возможность редактировать уже созданный заказ, изменяя количество товаров или удаляя их из заказа.
Используемые API методы

• PUT /orders/{id} — для обновления информации о заказе.

▎Передаваемые параметры
{
  "order_id": "123",
  "products": [
    {
      "product_id": "456",
      "quantity": 2
    },
    {
      "product_id": "789",
      "quantity": 1
    }
  ]
}
▎Процесс хранения информации о покупках пользователя

Информация о покупках хранится в таблице Заказ и связанной таблице Заказ_Товар, где каждая запись связывает заказ с конкретными товарами и их количеством.
6. SQL-запросы

1. Вывести покупателей с количеством осуществленных покупок
SELECT u.user_id, u.name, COUNT(o.order_id) AS purchase_count
FROM Пользователь u
LEFT JOIN Заказ o ON u.user_id = o.user_id
GROUP BY u.user_id, u.name;
2. Общую стоимость товаров для каждого покупателя и отсортировать результат в порядке убывания
SELECT u.user_id, u.name, SUM(o.total_amount) AS total_spent
FROM Пользователь u
JOIN Заказ o ON u.user_id = o.user_id
GROUP BY u.user_id, u.name
ORDER BY total_spent DESC;


3. Получить покупателей, купивших только один товар
SELECT u.user_id, u.name
FROM Пользователь u
JOIN Заказ o ON u.user_id = o.user_id
JOIN Заказ_Товар op ON o.order_id = op.order_id
GROUP BY u.user_id, u.name
HAVING COUNT(DISTINCT op.product_id) = 1;



